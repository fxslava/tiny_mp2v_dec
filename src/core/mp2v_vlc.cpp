// Copyright © 2021 Vladislav Ovchinnikov. All rights reserved.
#include "mp2v_vlc.h"
#include "common/cpu.h"
#include <algorithm>

struct vlc_value_t {
    int8_t vlc_len;
    int8_t value;
};

//ISO/IEC 13818-2 : 2000 (E) Annex B - Variable length code tables. B.1 Macroblock addressing
vlc_t macroblock_address_increment_to_vlc[35] = {
    { 0b0, 0 },           // 0 , val: none
    // nlz 0
    { 0b1, 1 },           // 1 , val: 1
    // nlz 1
    { 0b011, 3 },         // 2 , val: 3
    { 0b010, 3 },         // 3 , val: 2
    // nlz 2
    { 0b0011, 4 },        // 4 , val: 3
    { 0b0010, 4 },        // 5 , val: 2
    // nlz 3
    { 0b00011, 5 },       // 6 , val: 3
    { 0b00010, 5 },       // 7 , val: 2
    // nlz 4
    { 0b0000111, 7 },     // 8 , val: 7
    { 0b0000110, 7 },     // 9 , val: 6
    // nlz 4
    { 0b00001011, 8 },    // 10, val: 11
    { 0b00001010, 8 },    // 11, val: 10
    { 0b00001001, 8 },    // 12, val: 9
    { 0b00001000, 8 },    // 13, val: 8
    // nlz 5
    { 0b00000111, 8 },    // 14, val: 7
    { 0b00000110, 8 },    // 15, val: 6
    // nlz 5
    { 0b0000010111, 10 },  // 16, val: 23
    { 0b0000010110, 10 },  // 17, val: 22
    { 0b0000010101, 10 },  // 18, val: 21
    { 0b0000010100, 10 },  // 19, val: 20
    { 0b0000010011, 10 },  // 20, val: 19
    { 0b0000010010, 10 },  // 21, val: 18
    // nlz 5
    { 0b00000100011, 11 }, // 22, val: 35
    { 0b00000100010, 11 }, // 23, val: 34
    { 0b00000100001, 11 }, // 24, val: 33
    { 0b00000100000, 11 }, // 25, val: 32
    // nlz 6
    { 0b00000011111, 11 }, // 26, val: 31
    { 0b00000011110, 11 }, // 27, val: 30
    { 0b00000011101, 11 }, // 28, val: 29
    { 0b00000011100, 11 }, // 29, val: 28
    { 0b00000011011, 11 }, // 30, val: 27
    { 0b00000011010, 11 }, // 31, val: 26
    { 0b00000011001, 11 }, // 32, val: 25
    { 0b00000011000, 11 }, // 33, val: 24
    vlc_macroblock_escape_code
};

vlc_value_t vlc_mba[8][64] = {
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 },
    {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 },
    {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 },
    {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, {  1,   1 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 },
    {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 }, {  3,   3 },
    {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 },
    {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, {  3,   2 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 },
    {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 }, {  4,   5 },
    {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 },
    {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, {  4,   4 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 },
    {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 }, {  5,   7 },
    {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 },
    {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, {  5,   6 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  8,  13 }, {  8,  13 }, {  8,  13 }, {  8,  13 }, {  8,  12 }, {  8,  12 }, {  8,  12 }, {  8,  12 },
    {  8,  11 }, {  8,  11 }, {  8,  11 }, {  8,  11 }, {  8,  10 }, {  8,  10 }, {  8,  10 }, {  8,  10 },
    {  7,   9 }, {  7,   9 }, {  7,   9 }, {  7,   9 }, {  7,   9 }, {  7,   9 }, {  7,   9 }, {  7,   9 },
    {  7,   8 }, {  7,   8 }, {  7,   8 }, {  7,   8 }, {  7,   8 }, {  7,   8 }, {  7,   8 }, {  7,   8 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    { 11,  25 }, { 11,  24 }, { 11,  23 }, { 11,  22 }, { 10,  21 }, { 10,  21 }, { 10,  20 }, { 10,  20 },
    { 10,  19 }, { 10,  19 }, { 10,  18 }, { 10,  18 }, { 10,  17 }, { 10,  17 }, { 10,  16 }, { 10,  16 },
    {  8,  15 }, {  8,  15 }, {  8,  15 }, {  8,  15 }, {  8,  15 }, {  8,  15 }, {  8,  15 }, {  8,  15 },
    {  8,  14 }, {  8,  14 }, {  8,  14 }, {  8,  14 }, {  8,  14 }, {  8,  14 }, {  8,  14 }, {  8,  14 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    { 11,  33 }, { 11,  33 }, { 11,  32 }, { 11,  32 }, { 11,  31 }, { 11,  31 }, { 11,  30 }, { 11,  30 },
    { 11,  29 }, { 11,  29 }, { 11,  28 }, { 11,  28 }, { 11,  27 }, { 11,  27 }, { 11,  26 }, { 11,  26 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    { 11,  34 }, { 11,  34 }, { 11,  34 }, { 11,  34 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, }
};

int32_t get_macroblock_address_increment_lut(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlz = bit_scan_reverse(buffer);
    int idx = buffer >> (32 - nlz - 6);
    int val = vlc_mba[nlz][idx].value;
    bs->skip_bits(vlc_mba[nlz][idx].vlc_len);
    return val;
}

int32_t get_macroblock_address_increment(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlz = bit_scan_reverse(buffer);
    switch (nlz) {
    case 0: return bs->read_next_bits(1);
    case 1: return 5  - bs->read_next_bits(3);
    case 2: return 7  - bs->read_next_bits(4);
    case 3: return 9  - bs->read_next_bits(5);
    case 4:
        if (buffer > 0x0B000000)
            return 15 - bs->read_next_bits(7);
        else
            return 21 - bs->read_next_bits(8);
    case 5:
        if (buffer > 0x05C00000)
            return 21 - bs->read_next_bits(8);
        else if (buffer > 0x04600000)
            return 39 - bs->read_next_bits(10);
        else
            return 57 - bs->read_next_bits(11);
    case 6: return 57 - bs->read_next_bits(11);
    }
    return 0; // invalid address increment
}

macroblock_type_vlc_t i_macroblock_type[2] = {
    { 0b1,      1, 0b000010},//0x80
    { 0b01,     2, 0b100010}
};

macroblock_type_vlc_t p_macroblock_type[7] = {
    { 0b1,      1, 0b010100 },//0x80
    { 0b01,     2, 0b000100 },//0x40
    { 0b001,    3, 0b010000 },//0x20
    { 0b00011,  5, 0b000010 },
    { 0b00010,  5, 0b110100 },
    { 0b00001,  5, 0b100100 },//0x08
    { 0b000001, 6, 0b100010 }
};

macroblock_type_vlc_t b_macroblock_type[11] = {
    { 0b11,     2, 0b011100 },
    { 0b10,     2, 0b011000 }, //0x80
    { 0b011,    3, 0b001100 },
    { 0b010,    3, 0b001000 }, //0x40
    { 0b0011,   4, 0b010100 },
    { 0b0010,   4, 0b010000 }, //0x20
    { 0b00011,  5, 0b000010 },
    { 0b00010,  5, 0b111100 }, //0x10
    { 0b000011, 6, 0b110100 },
    { 0b000010, 6, 0b101100 },
    { 0b000001, 6, 0b100010 }
};
                                    //-,        1,        2,        3,
uint8_t p_macroblock_type_0x08[5] = { 0,        0b100100, 0b110100, 0b000010 };
uint8_t b_macroblock_type_0x80[4] = { 0,        0,        0b011000, 0b011100 };
uint8_t b_macroblock_type_0x40[4] = { 0,        0,        0b001000, 0b001100 };
uint8_t b_macroblock_type_0x20[4] = { 0,        0,        0b010000, 0b010100 };
uint8_t b_macroblock_type_0x10[4] = { 0,        0,        0b111100, 0b000010 };
uint8_t b_macroblock_type_else[5] = { 0,        0b100010, 0b101100, 0b110100 };

uint8_t get_macroblock_type(bitstream_reader_i* bs, int picture_coding_type) {
    uint8_t buffer = (uint8_t)bs->get_next_bits(8);
    if (picture_coding_type == 1) {// I
        if (buffer >= 0x80) return 0b000010;
        else                return 0b100010;
    }
    if (picture_coding_type == 2) {// P
        if (buffer >= 0x80) { bs->skip_bits(1);  return 0b010100; } else
        if (buffer >= 0x40) { bs->skip_bits(2);  return 0b000100; } else
        if (buffer >= 0x20) { bs->skip_bits(3);  return 0b010000; } else
        if (buffer >= 0x08) return p_macroblock_type_0x08[bs->read_next_bits(5)]; else { 
         bs->skip_bits(6);  return 0b100010; }
    }
    if (picture_coding_type == 3) {// B
        if (buffer >= 0x80) return b_macroblock_type_0x80[bs->read_next_bits(2)]; else
        if (buffer >= 0x40) return b_macroblock_type_0x40[bs->read_next_bits(3)]; else
        if (buffer >= 0x20) return b_macroblock_type_0x20[bs->read_next_bits(4)]; else
        if (buffer >= 0x10) return b_macroblock_type_0x10[bs->read_next_bits(5)];
        else                return b_macroblock_type_else[bs->read_next_bits(6)];
    }
    return true;
}

macroblock_type_vlc_t ss_i_macroblock_type[5] = {
    { 0b1,         1, 0b000100 }, //0x80
    { 0b01,        2, 0b100100 }, //0x40
    { 0b0011,      4, 0b000010 },
    { 0b0010,      4, 0b100010 },
    { 0b0001,      4, 0b000000 }
};

macroblock_type_vlc_t ss_p_macroblock_type[16] = {
    { 0b11,        2, 0b110101 },
    { 0b10,        2, 0b010100 }, //0x80
    { 0b011,       3, 0b010101 },
    { 0b010,       3, 0b110100 }, //0x40
    { 0b0011,      4, 0b010001 },
    { 0b0010,      4, 0b010000 }, //0x20
    { 0b000111,    6, 0b000101 },
    { 0b000110,    6, 0b000001 },
    { 0b000101,    6, 0b100101 },
    { 0b000100,    6, 0b100100 }, //0x10
    { 0b0000111,   7, 0b000010 },
    { 0b0000110,   7, 0b100010 },
    { 0b0000101,   7, 0b000100 },
    { 0b0000100,   7, 0b000100 }, //0x08
    { 0b0000011,   7, 0b000000 },
    { 0b0000010,   7, 0b100100 }
};

macroblock_type_vlc_t ss_b_macroblock_type[20] = {
    { 0b11,        2, 0b011100 },
    { 0b10,        2, 0b011000 }, //0x80
    { 0b011,       3, 0b001100 },
    { 0b010,       3, 0b001000 }, //0x40
    { 0b0011,      4, 0b010100 },
    { 0b0010,      4, 0b010000 }, //0x20
    { 0b000111,    6, 0b001101 },
    { 0b000110,    6, 0b001001 },
    { 0b000101,    6, 0b010101 },
    { 0b000100,    6, 0b010001 }, //0x10
    { 0b0000111,   7, 0b111100 },
    { 0b0000110,   7, 0b000010 },
    { 0b0000101,   7, 0b101100 },
    { 0b0000100,   7, 0b110100 }, //0x08
    { 0b000001111, 9, 0b000100 },
    { 0b000001110, 9, 0b000000 },
    { 0b000001101, 9, 0b100100 },
    { 0b000001100, 9, 0b101101 }, //0x06
    { 0b00000101,  8, 0b110101 },
    { 0b00000100,  8, 0b100010 }
    //else 9bit
};

                                       //-,        1,        2,        3
uint8_t ss_i_macroblock_type_else[4] = { 0,        0b000000, 0b100010, 0b000010 };
uint8_t ss_p_macroblock_type_0x80[4] = { 0,        0,        0b010100, 0b110101 };
uint8_t ss_p_macroblock_type_0x40[4] = { 0,        0,        0b110100, 0b010101 };
uint8_t ss_p_macroblock_type_0x20[4] = { 0,        0,        0b010000, 0b010001 };
                                       //4,        5,        6,        7
uint8_t ss_p_macroblock_type_0x10[8] = { 0b100100, 0b100101, 0b000001, 0b000101 };
                                       //-,        1,        2,        3,        4,        5,        6,        7
uint8_t ss_p_macroblock_type_else[8] = { 0,        0,        0b100100, 0b000000, 0b000100, 0b000100, 0b100010, 0b000010 };
                                       //-,        1,        2,        3
uint8_t ss_b_macroblock_type_0x80[4] = { 0,        0,        0b011000, 0b011100 };
uint8_t ss_b_macroblock_type_0x40[4] = { 0,        0,        0b001000, 0b001100 };
uint8_t ss_b_macroblock_type_0x20[4] = { 0,        0,        0b010000, 0b010100 };
                                       //4,        5,        6,        7
uint8_t ss_b_macroblock_type_0x10[4] = { 0b010001, 0b010101, 0b001001, 0b001101 };
uint8_t ss_b_macroblock_type_0x08[4] = { 0b110100, 0b101100, 0b000010, 0b111100 };
                                       //12,       13,       14,       15
uint8_t ss_b_macroblock_type_0x06[4] = { 0b101101, 0b100100, 0b000000, 0b000100 };
                                       //4,        5,        6,        7
uint8_t ss_b_macroblock_type_else[4] = { 0b100010, 0b110101, 0,        0 };

uint8_t get_spatial_scalability_macroblock_type(bitstream_reader_i* bs, int picture_coding_type) {
    if (picture_coding_type == 1) {// Intra
        uint8_t buffer = (uint8_t)bs->get_next_bits(8);
        if (buffer >= 0x80) { bs->skip_bits(1); return 0b000100; } else
        if (buffer >= 0x40) { bs->skip_bits(2); return 0b100100; } else
            return ss_i_macroblock_type_else[bs->read_next_bits(4)];
    }
    if (picture_coding_type == 2) {// Pred
        uint8_t buffer = (uint8_t)bs->get_next_bits(8);
        if (buffer >= 0x80) return ss_p_macroblock_type_0x80[bs->read_next_bits(2)]; else
        if (buffer >= 0x40) return ss_p_macroblock_type_0x40[bs->read_next_bits(3)]; else
        if (buffer >= 0x20) return ss_p_macroblock_type_0x20[bs->read_next_bits(4)]; else
        if (buffer >= 0x10) return ss_p_macroblock_type_0x10[bs->read_next_bits(6) - 4]; else
            return ss_p_macroblock_type_else[bs->read_next_bits(7)];
    }
    if (picture_coding_type == 3) {// Bidir
        uint8_t buffer = (uint8_t)bs->get_next_bits(8);
        if (buffer >= 0x80) return ss_b_macroblock_type_0x80[bs->read_next_bits(2)]; else
        if (buffer >= 0x40) return ss_b_macroblock_type_0x40[bs->read_next_bits(3)]; else
        if (buffer >= 0x20) return ss_b_macroblock_type_0x20[bs->read_next_bits(4)]; else
        if (buffer >= 0x10) return ss_b_macroblock_type_0x10[bs->read_next_bits(6) - 4]; else
        if (buffer >= 0x08) return ss_b_macroblock_type_0x08[bs->read_next_bits(7) - 4]; else
        if (buffer >= 0x06) return ss_b_macroblock_type_0x06[bs->read_next_bits(9) -12]; else
            return ss_b_macroblock_type_else[bs->read_next_bits(8) - 4];
    }
    return true;
}

macroblock_type_vlc_t snr_macroblock_type[3] = {
    { 0b1,   1, 0b000100 }, //0x80
    { 0b01,  2, 0b100100 },
    { 0b001, 3, 0b000000 }
};

uint8_t get_snr_scalability_macroblock_type(bitstream_reader_i* bs, int picture_coding_type) {
    uint8_t buffer = (uint8_t)bs->get_next_bits(2);
    if (buffer >= 2) return 0b000100;
    if (buffer >= 1) return 0b100100;
    return 0b000000;
}

//ISO/IEC 13818-2 : 2000 (E) Annex B - Variable length code tables. B.9 Macroblock pattern
vlc_t coded_block_pattern_to_vlc[64] = {
    {0b000000001, 9 },    {0b01011,     5 },    {0b01001,     5 },    {0b001101,    6 },
    {0b1101,      4 },    {0b0010111,   7 },    {0b0010011,   7 },    {0b00011111,  8 },
    {0b1100,      4 },    {0b0010110,   7 },    {0b0010010,   7 },    {0b00011110,  8 },
    {0b10011,     5 },    {0b00011011,  8 },    {0b00010111,  8 },    {0b00010011,  8 },
    {0b1011,      4 },    {0b0010101,   7 },    {0b0010001,   7 },    {0b00011101,  8 },
    {0b10001,     5 },    {0b00011001,  8 },    {0b00010101,  8 },    {0b00010001,  8 },
    {0b001111,    6 },    {0b00001111,  8 },    {0b00001101,  8 },    {0b000000011, 9 },
    {0b01111,     5 },    {0b00001011,  8 },    {0b00000111,  8 },    {0b000000111, 9 },
    {0b1010,      4 },    {0b0010100,   7 },    {0b0010000,   7 },    {0b00011100,  8 },
    {0b001110,    6 },    {0b00001110,  8 },    {0b00001100,  8 },    {0b000000010, 9 },
    {0b10000,     5 },    {0b00011000,  8 },    {0b00010100,  8 },    {0b00010000,  8 },
    {0b01110,     5 },    {0b00001010,  8 },    {0b00000110,  8 },    {0b000000110, 9 },
    {0b10010,     5 },    {0b00011010,  8 },    {0b00010110,  8 },    {0b00010010,  8 },
    {0b01101,     5 },    {0b00001001,  8 },    {0b00000101,  8 },    {0b000000101, 9 },
    {0b01100,     5 },    {0b00001000,  8 },    {0b00000100,  8 },    {0b000000100, 9 },
    {0b111,       3 },    {0b01010,     5 },    {0b01000,     5 },    {0b001100,    6 },
};

vlc_value_t vlc_cbp[9][32] = {
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 5, 40 }, { 5, 20 }, { 5, 48 }, { 5, 12 }, { 4, 32 }, { 4, 32 }, { 4, 16 }, { 4, 16 }, 
      { 4,  8 }, { 4,  8 }, { 4,  4 }, { 4,  4 }, { 3, 60 }, { 3, 60 }, { 3, 60 }, { 3, 60 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 5, 62 }, { 5, 62 }, { 5,  2 }, { 5,  2 }, { 5, 61 }, { 5, 61 }, { 5,  1 }, { 5,  1 }, 
      { 5, 56 }, { 5, 56 }, { 5, 52 }, { 5, 52 }, { 5, 44 }, { 5, 44 }, { 5, 28 }, { 5, 28 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 7, 34 }, { 7, 18 }, { 7, 10 }, { 7,  6 }, { 7, 33 }, { 7, 17 }, { 7,  9 }, { 7,  5 }, 
      { 6, 63 }, { 6, 63 }, { 6,  3 }, { 6,  3 }, { 6, 36 }, { 6, 36 }, { 6, 24 }, { 6, 24 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 8, 43 }, { 8, 23 }, { 8, 51 }, { 8, 15 }, { 8, 42 }, { 8, 22 }, { 8, 50 }, { 8, 14 }, 
      { 8, 41 }, { 8, 21 }, { 8, 49 }, { 8, 13 }, { 8, 35 }, { 8, 19 }, { 8, 11 }, { 8,  7 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 8, 57 }, { 8, 57 }, { 8, 53 }, { 8, 53 }, { 8, 45 }, { 8, 45 }, { 8, 29 }, { 8, 29 }, 
      { 8, 38 }, { 8, 38 }, { 8, 26 }, { 8, 26 }, { 8, 37 }, { 8, 37 }, { 8, 25 }, { 8, 25 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 8, 58 }, { 8, 58 }, { 8, 58 }, { 8, 58 }, { 8, 54 }, { 8, 54 }, { 8, 54 }, { 8, 54 }, 
      { 8, 46 }, { 8, 46 }, { 8, 46 }, { 8, 46 }, { 8, 30 }, { 8, 30 }, { 8, 30 }, { 8, 30 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 9, 59 }, { 9, 59 }, { 9, 59 }, { 9, 59 }, { 9, 55 }, { 9, 55 }, { 9, 55 }, { 9, 55 }, 
      { 9, 47 }, { 9, 47 }, { 9, 47 }, { 9, 47 }, { 9, 31 }, { 9, 31 }, { 9, 31 }, { 9, 31 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 9, 39 }, { 9, 39 }, { 9, 39 }, { 9, 39 }, { 9, 39 }, { 9, 39 }, { 9, 39 }, { 9, 39 }, 
      { 9, 27 }, { 9, 27 }, { 9, 27 }, { 9, 27 }, { 9, 27 }, { 9, 27 }, { 9, 27 }, { 9, 27 }, },
    { { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, { 0,  0 }, 
      { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, 
      { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, { 9,  0 }, },
};

int32_t get_coded_block_pattern(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlz = bit_scan_reverse(buffer);
    int idx = buffer >> (32 - nlz - 5);
    int val = vlc_cbp[nlz][idx].value;
    bs->skip_bits(vlc_cbp[nlz][idx].vlc_len);
    return val;
}

//ISO/IEC 13818-2 : 2000 (E) Annex B - B.4 Motion vectors. B.10 Table
vlc_t motion_code_to_vlc[33] = {
    { 0b00000011001, 11 }, // -16
    { 0b00000011011, 11 }, // -15
    { 0b00000011101, 11 }, // -14
    { 0b00000011111, 11 }, // -13
    { 0b00000100001, 11 }, // -12
    { 0b00000100011, 11 }, // -11
    { 0b0000010011 , 10 }, // -10
    { 0b0000010101 , 10 }, //  -9
    { 0b0000010111 , 10 }, //  -8
    { 0b00000111   ,  8 }, //  -7
    { 0b00001001   ,  8 }, //  -6
    { 0b00001011   ,  8 }, //  -5
    { 0b0000111    ,  7 }, //  -4
    { 0b00011      ,  5 }, //  -3
    { 0b0011       ,  4 }, //  -2
    { 0b011        ,  3 }, //  -1
    { 0b1          ,  1 }, //   0
    { 0b010        ,  3 }, //   1
    { 0b0010       ,  4 }, //   2
    { 0b00010      ,  5 }, //   3
    { 0b0000110    ,  7 }, //   4
    { 0b00001010   ,  8 }, //   5
    { 0b00001000   ,  8 }, //   6
    { 0b00000110   ,  8 }, //   7
    { 0b0000010110 , 10 }, //   8
    { 0b0000010100 , 10 }, //   9
    { 0b0000010010 , 10 }, //  10
    { 0b00000100010, 11 }, //  11
    { 0b00000100000, 11 }, //  12
    { 0b00000011110, 11 }, //  13
    { 0b00000011100, 11 }, //  14
    { 0b00000011010, 11 }, //  15
    { 0b00000011000, 11 }  //  16
};

vlc_value_t vlc_motion_code[7][64] = {
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 },
    {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 },
    {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 },
    {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, {  1,   0 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 },
    {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 }, {  3,   1 },
    {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 },
    {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, {  3,  -1 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 },
    {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 }, {  4,   2 },
    {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 },
    {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, {  4,  -2 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 },
    {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 }, {  5,   3 },
    {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 },
    {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, {  5,  -3 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  8,   6 }, {  8,   6 }, {  8,   6 }, {  8,   6 }, {  8,  -6 }, {  8,  -6 }, {  8,  -6 }, {  8,  -6 },
    {  8,   5 }, {  8,   5 }, {  8,   5 }, {  8,   5 }, {  8,  -5 }, {  8,  -5 }, {  8,  -5 }, {  8,  -5 },
    {  7,   4 }, {  7,   4 }, {  7,   4 }, {  7,   4 }, {  7,   4 }, {  7,   4 }, {  7,   4 }, {  7,   4 },
    {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, {  7,  -4 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    { 11,  12 }, { 11, -12 }, { 11,  11 }, { 11, -11 }, { 10,  10 }, { 10,  10 }, { 10, -10 }, { 10, -10 },
    { 10,   9 }, { 10,   9 }, { 10,  -9 }, { 10,  -9 }, { 10,   8 }, { 10,   8 }, { 10,  -8 }, { 10,  -8 },
    {  8,   7 }, {  8,   7 }, {  8,   7 }, {  8,   7 }, {  8,   7 }, {  8,   7 }, {  8,   7 }, {  8,   7 },
    {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, {  8,  -7 }, },
  { {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 }, {  0,   0 },
    { 11,  16 }, { 11,  16 }, { 11, -16 }, { 11, -16 }, { 11,  15 }, { 11,  15 }, { 11, -15 }, { 11, -15 },
    { 11,  14 }, { 11,  14 }, { 11, -14 }, { 11, -14 }, { 11,  13 }, { 11,  13 }, { 11, -13 }, { 11, -13 }, }
};

int32_t get_motion_code(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlz = bit_scan_reverse(buffer);
    int idx = buffer >> (32 - nlz - 6);
    int val = vlc_motion_code[nlz][idx].value;
    bs->skip_bits(vlc_motion_code[nlz][idx].vlc_len);
    return val;
}

//ISO/IEC 13818-2 : 2000 (E) Annex B - B.4 Motion vectors. B.11 Table.
vlc_t dmvector_to_vlc[3] = {
    { 0b11, 2}, // -1
    { 0b0,  1}, //  0
    { 0b10, 2}, //  1
};

int32_t get_dmvector(bitstream_reader_i* bs) {
    int buffer = bs->get_next_bits(2);
    switch (buffer) {
    case 3: 
        bs->skip_bits(2); return -1;
    case 0:
    case 1: 
        bs->skip_bits(1); return 0;
    case 2:
        bs->skip_bits(2); return 1;
    }
    return 0;
}

//ISO/IEC 13818-2 : 2000 (E) Annex B - B.5 DCT coefficients. B.12 Table.
vlc_t dct_size_luminance_to_vlc[12] = {
    { 0b100, 3 }, //0
    { 0b00, 2 },  //1
    { 0b01, 2 },  //2
    { 0b101, 3 }, //3
    { 0b110, 3 }, //4
    { 0b1110, 4 }, //5
    { 0b11110, 5 }, //6
    { 0b111110, 6 }, //7
    { 0b1111110, 7 }, //8
    { 0b11111110, 8 }, //9
    { 0b111111110, 9 }, //10
    { 0b111111111, 9 }  //11
};

int32_t get_dct_size_luminance(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlo = bit_scan_reverse(~buffer);
    if (nlo > 1) {
        int val = nlo + 2;
        if (val > 10) {
            bs->skip_bits(9);
            return 11;
        }
        else {
            bs->skip_bits(val - 1);
            return val;
        }
    }
    else {
        buffer >>= 29;
        switch (buffer) {
        case 0b100: bs->skip_bits(3); return 0;
        case 0b000: bs->skip_bits(2); return 1;
        case 0b001: bs->skip_bits(2); return 1;
        case 0b010: bs->skip_bits(2); return 2;
        case 0b011: bs->skip_bits(2); return 2;
        case 0b101: bs->skip_bits(3); return 3;
        }
    }
}

//ISO/IEC 13818-2 : 2000 (E) Annex B - B.5 DCT coefficients. B.13 Table.
vlc_t dct_size_chrominance_to_vlc[12] = {
    { 0b00, 2 }, //0
    { 0b01, 2 }, //1
    { 0b10, 2 }, //2
    { 0b110, 3 }, //3
    { 0b1110, 4 }, //4
    { 0b11110, 5 }, //5
    { 0b111110, 6 }, //6
    { 0b1111110, 7 }, //7
    { 0b11111110, 8 }, //8
    { 0b111111110, 9 }, //9
    { 0b1111111110, 10 }, //10
    { 0b1111111111, 10 }  //11
};

int32_t get_dct_size_chrominance(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    int nlo = bit_scan_reverse(~buffer);
    if (nlo > 1) {
        int val = nlo + 1;
        if (val > 10) {
            bs->skip_bits(10);
            return 11;
        }
        else {
            bs->skip_bits(val);
            return val;
        }
    }
    else {
        buffer >>= 30;
        bs->skip_bits(2);
        return buffer;
    }
}

struct vlc_lut_coeff_t {
    int16_t len;
    coeff_t coeff;
};

vlc_coeff_t coeff_zero_vlc[112] = {
    { { 0b1, 1 }, { 0, 1 } },
    { { 0b11, 2 }, { 0, 1 } },
    { { 0b011, 3 }, { 1, 1 } },
    { { 0b0100, 4 }, { 0, 2 } },
    { { 0b0101, 4 }, { 2, 1 } },
    { { 0b00101, 5 }, { 0, 3 } },
    { { 0b00111, 5 }, { 3, 1 } },
    { { 0b00110, 5 }, { 4, 1 } },
    { { 0b000110, 6 }, { 1, 2 } },
    { { 0b000111, 6 }, { 5, 1 } },
    { { 0b000101, 6 }, { 6, 1 } },
    { { 0b000100, 6 }, { 7, 1 } },
    { { 0b0000110, 7 }, { 0, 4 } },
    { { 0b0000100, 7 }, { 2, 2 } },
    { { 0b0000111, 7 }, { 8, 1 } },
    { { 0b0000101, 7 }, { 9, 1 } },
    { { 0b00100111, 8 }, { 10, 1 } },
    { { 0b00100110, 8 }, { 0,  5 } },
    { { 0b00100101, 8 }, { 1,  3 } },
    { { 0b00100100, 8 }, { 3,  2 } },
    { { 0b00100011, 8 }, { 11, 1 } },
    { { 0b00100010, 8 }, { 12, 1 } },
    { { 0b00100001, 8 }, { 0,  6 } },
    { { 0b00100000, 8 }, { 13, 1 } },
    { { 0b0000001010, 10 }, { 0,  7 } },
    { { 0b0000001100, 10 }, { 1,  4 } },
    { { 0b0000001011, 10 }, { 2,  3 } },
    { { 0b0000001111, 10 }, { 4,  2 } },
    { { 0b0000001001, 10 }, { 5,  2 } },
    { { 0b0000001110, 10 }, { 14, 1 } },
    { { 0b0000001101, 10 }, { 15, 1 } },
    { { 0b0000001000, 10 }, { 16, 1 } },
    { { 0b000000011101, 12 }, { 0,  8 } },
    { { 0b000000011000, 12 }, { 0,  9 } },
    { { 0b000000010011, 12 }, { 0,  10 } },
    { { 0b000000010000, 12 }, { 0,  11 } },
    { { 0b000000011011, 12 }, { 1,  5 } },
    { { 0b000000010100, 12 }, { 2,  4 } },
    { { 0b000000011100, 12 }, { 3,  3 } },
    { { 0b000000010010, 12 }, { 4,  3 } },
    { { 0b000000011110, 12 }, { 6,  2 } },
    { { 0b000000010101, 12 }, { 7,  2 } },
    { { 0b000000010001, 12 }, { 8,  2 } },
    { { 0b000000011111, 12 }, { 17, 1 } },
    { { 0b000000011010, 12 }, { 18, 1 } },
    { { 0b000000011001, 12 }, { 19, 1 } },
    { { 0b000000010111, 12 }, { 20, 1 } },
    { { 0b000000010110, 12 }, { 21, 1 } },
    { { 0b0000000011010, 13 }, { 0, 12 } },
    { { 0b0000000011001, 13 }, { 0, 13 } },
    { { 0b0000000011000, 13 }, { 0, 14 } },
    { { 0b0000000010111, 13 }, { 0, 15 } },
    { { 0b0000000010110, 13 }, { 1,  6 } },
    { { 0b0000000010101, 13 }, { 1,  7 } },
    { { 0b0000000010100, 13 }, { 2,  5 } },
    { { 0b0000000010011, 13 }, { 3,  4 } },
    { { 0b0000000010010, 13 }, { 5,  3 } },
    { { 0b0000000010001, 13 }, { 9,  2 } },
    { { 0b0000000010000, 13 }, { 10, 2 } },
    { { 0b0000000011111, 13 }, { 22, 1 } },
    { { 0b0000000011110, 13 }, { 23, 1 } },
    { { 0b0000000011101, 13 }, { 24, 1 } },
    { { 0b0000000011100, 13 }, { 25, 1 } },
    { { 0b0000000011011, 13 }, { 26, 1 } },
    { { 0b00000000011111, 14 }, { 0, 16 } },
    { { 0b00000000011110, 14 }, { 0, 17 } },
    { { 0b00000000011101, 14 }, { 0, 18 } },
    { { 0b00000000011100, 14 }, { 0, 19 } },
    { { 0b00000000011011, 14 }, { 0, 20 } },
    { { 0b00000000011010, 14 }, { 0, 21 } },
    { { 0b00000000011001, 14 }, { 0, 22 } },
    { { 0b00000000011000, 14 }, { 0, 23 } },
    { { 0b00000000010111, 14 }, { 0, 24 } },
    { { 0b00000000010110, 14 }, { 0, 25 } },
    { { 0b00000000010101, 14 }, { 0, 26 } },
    { { 0b00000000010100, 14 }, { 0, 27 } },
    { { 0b00000000010011, 14 }, { 0, 28 } },
    { { 0b00000000010010, 14 }, { 0, 29 } },
    { { 0b00000000010001, 14 }, { 0, 30 } },
    { { 0b00000000010000, 14 }, { 0, 31 } },
    { { 0b000000000011000, 15 }, { 0, 32 } },
    { { 0b000000000010111, 15 }, { 0, 33 } },
    { { 0b000000000010110, 15 }, { 0, 34 } },
    { { 0b000000000010101, 15 }, { 0, 35 } },
    { { 0b000000000010100, 15 }, { 0, 36 } },
    { { 0b000000000010011, 15 }, { 0, 37 } },
    { { 0b000000000010010, 15 }, { 0, 38 } },
    { { 0b000000000010001, 15 }, { 0, 39 } },
    { { 0b000000000010000, 15 }, { 0, 40 } },
    { { 0b000000000011111, 15 }, { 1, 8  } },
    { { 0b000000000011110, 15 }, { 1, 9  } },
    { { 0b000000000011101, 15 }, { 1, 10 } },
    { { 0b000000000011100, 15 }, { 1, 11 } },
    { { 0b000000000011011, 15 }, { 1, 12 } },
    { { 0b000000000011010, 15 }, { 1, 13 } },
    { { 0b000000000011001, 15 }, { 1, 14 } },
    { { 0b0000000000010011, 16 }, { 1, 15 } },
    { { 0b0000000000010010, 16 }, { 1, 16 } },
    { { 0b0000000000010001, 16 }, { 1, 17 } },
    { { 0b0000000000010000, 16 }, { 1, 18 } },
    { { 0b0000000000010100, 16 }, { 6,  3 } },
    { { 0b0000000000011010, 16 }, { 11, 2 } },
    { { 0b0000000000011001, 16 }, { 12, 2 } },
    { { 0b0000000000011000, 16 }, { 13, 2 } },
    { { 0b0000000000010111, 16 }, { 14, 2 } },
    { { 0b0000000000010110, 16 }, { 15, 2 } },
    { { 0b0000000000010101, 16 }, { 16, 2 } },
    { { 0b0000000000011111, 16 }, { 27, 1 } },
    { { 0b0000000000011110, 16 }, { 28, 1 } },
    { { 0b0000000000011101, 16 }, { 29, 1 } },
    { { 0b0000000000011100, 16 }, { 30, 1 } },
    { { 0b0000000000011011, 16 }, { 31, 1 } }
};

vlc_lut_coeff_t vlc_coeff_zero[12][32] = {
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}}, { 1, { 0,  1}},
    { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, { 2, { 0,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 4, { 0,  2}}, { 4, { 0,  2}}, { 4, { 0,  2}}, { 4, { 0,  2}}, { 4, { 2,  1}}, { 4, { 2,  1}}, { 4, { 2,  1}}, { 4, { 2,  1}},
    { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, { 3, { 1,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 5, { 0,  3}}, { 5, { 0,  3}}, { 5, { 0,  3}}, { 5, { 0,  3}},
    { 5, { 4,  1}}, { 5, { 4,  1}}, { 5, { 4,  1}}, { 5, { 4,  1}}, { 5, { 3,  1}}, { 5, { 3,  1}}, { 5, { 3,  1}}, { 5, { 3,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 6, { 7,  1}}, { 6, { 7,  1}}, { 6, { 7,  1}}, { 6, { 7,  1}}, { 6, { 6,  1}}, { 6, { 6,  1}}, { 6, { 6,  1}}, { 6, { 6,  1}},
    { 6, { 1,  2}}, { 6, { 1,  2}}, { 6, { 1,  2}}, { 6, { 1,  2}}, { 6, { 5,  1}}, { 6, { 5,  1}}, { 6, { 5,  1}}, { 6, { 5,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 7, { 2,  2}}, { 7, { 2,  2}}, { 7, { 2,  2}}, { 7, { 2,  2}}, { 7, { 9,  1}}, { 7, { 9,  1}}, { 7, { 9,  1}}, { 7, { 9,  1}},
    { 7, { 0,  4}}, { 7, { 0,  4}}, { 7, { 0,  4}}, { 7, { 0,  4}}, { 7, { 8,  1}}, { 7, { 8,  1}}, { 7, { 8,  1}}, { 7, { 8,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {10, {16,  1}}, {10, {16,  1}}, {10, { 5,  2}}, {10, { 5,  2}}, {10, { 0,  7}}, {10, { 0,  7}}, {10, { 2,  3}}, {10, { 2,  3}},
    {10, { 1,  4}}, {10, { 1,  4}}, {10, {15,  1}}, {10, {15,  1}}, {10, {14,  1}}, {10, {14,  1}}, {10, { 4,  2}}, {10, { 4,  2}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {12, { 0, 11}}, {12, { 8,  2}}, {12, { 4,  3}}, {12, { 0, 10}}, {12, { 2,  4}}, {12, { 7,  2}}, {12, {21,  1}}, {12, {20,  1}},
    {12, { 0,  9}}, {12, {19,  1}}, {12, {18,  1}}, {12, { 1,  5}}, {12, { 3,  3}}, {12, { 0,  8}}, {12, { 6,  2}}, {12, {17,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {13, {10,  2}}, {13, { 9,  2}}, {13, { 5,  3}}, {13, { 3,  4}}, {13, { 2,  5}}, {13, { 1,  7}}, {13, { 1,  6}}, {13, { 0, 15}},
    {13, { 0, 14}}, {13, { 0, 13}}, {13, { 0, 12}}, {13, {26,  1}}, {13, {25,  1}}, {13, {24,  1}}, {13, {23,  1}}, {13, {22,  1}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {14, { 0, 31}}, {14, { 0, 30}}, {14, { 0, 29}}, {14, { 0, 28}}, {14, { 0, 27}}, {14, { 0, 26}}, {14, { 0, 25}}, {14, { 0, 24}},
    {14, { 0, 23}}, {14, { 0, 22}}, {14, { 0, 21}}, {14, { 0, 20}}, {14, { 0, 19}}, {14, { 0, 18}}, {14, { 0, 17}}, {14, { 0, 16}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {15, { 0, 40}}, {15, { 0, 39}}, {15, { 0, 38}}, {15, { 0, 37}}, {15, { 0, 36}}, {15, { 0, 35}}, {15, { 0, 34}}, {15, { 0, 33}},
    {15, { 0, 32}}, {15, { 1, 14}}, {15, { 1, 13}}, {15, { 1, 12}}, {15, { 1, 11}}, {15, { 1, 10}}, {15, { 1,  9}}, {15, { 1,  8}}, },
  { { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}}, { 0, { 0,  0}},
    {16, { 1, 18}}, {16, { 1, 17}}, {16, { 1, 16}}, {16, { 1, 15}}, {16, { 6,  3}}, {16, {16,  2}}, {16, {15,  2}}, {16, {14,  2}},
    {16, {13,  2}}, {16, {12,  2}}, {16, {11,  2}}, {16, {31,  1}}, {16, {30,  1}}, {16, {29,  1}}, {16, {28,  1}}, {16, {27,  1}},
    }
};

coeff_t vlc_coeff_zero_ex[8] = { { 13, 1 }, { 0, 6 }, { 12, 1 }, { 11, 1 }, { 3, 2 }, { 1, 3 }, { 0, 5 }, { 10, 1 } };

coeff_t get_coeff_zero(bitstream_reader_i* bs) {
    uint32_t buffer = bs->get_next_bits(32);
    if ((buffer >> (32 - 5)) == 0b00100) {
        int idx = (buffer >> (32 - 8)) & 7;
        return vlc_coeff_zero_ex[idx];
    }
    else {
        int nlz = bit_scan_reverse(buffer);
        int idx = buffer >> (32 - nlz - 5);
        coeff_t val = vlc_coeff_zero[nlz][idx].coeff;
        bs->skip_bits(vlc_coeff_zero[nlz][idx].len);
        return val;
    }
}